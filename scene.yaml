# Author @patriciogv - 2015

import:
    - https://tangrams.github.io/blocks/global.yaml
    - https://tangrams.github.io/blocks/elevation/normal.yaml
    - https://tangrams.github.io/blocks/geometry/projections.yaml
    - https://tangrams.github.io/blocks/functions/zoom.yaml
    - https://tangrams.github.io/blocks/shapes/cross.yaml
    - https://tangrams.github.io/blocks/space/tile.yaml
    - https://tangrams.github.io/blocks/elevation/stripes.yaml
    - https://tangrams.github.io/ux_language/ux_language.yaml

sources:
    osm:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-DFFH1UM
        rasters: [normals-elevation]
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png?api_key=mapzen-YoRQaZF
        max_zoom: 15
    # iss:
    #     type: GeoJSON
    #     url: data/iss.geojson

# cameras:
#     perspective:
#         type: flat

lights:
    point_light:
        type: point
        origin: ground
        position: [0,0,1000px]
        specular: 1
        diffuse: 1

layers:
    orbit:
        data: { source: iss }
        filter: { $zoom: { min: 0, max: 9 } }
        draw:
            orbit:
                order: 100001
                color: [[1,[0.906,0.914,0.0]],[9,[0.914,0.914,0.914]]]
                width: [[1, 2px], [7, 1.5px], [8, 0.5px], [9, 0px]]
    earth:
        data: { source: osm }
        draw:
            earth:
                order: global.order
                color: '#555'
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: '#ddd'
    landuse:
        data: { source: osm }
        draw:
            landuse:
                order: global.order
                color: gray
    roads:
        data: { source: osm, layer: roads }
        filter: { $zoom: {min: 7}, not: { highway: service, kind: rail } }
        draw:
            spline:
                order: global.order
                color: white
                width: [[6,0px], [7,.25px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                spline:
                    color: [1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    spline:
                        color: [1.000,0.933,0.710]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        spline:
                            color: [0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    spline:
                        color: [0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                spline:
                    color: [[13, [0.8, 0.8, 0.8]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { highway: primary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { highway: secondary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { highway: tertiary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                spline:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]
    places:
        data: { source: osm }
        draw:
            text:
                text_source: global.ux_language_text_source
                priority: 10
                font:
                    family: ['Jura', Helvetica]
                    weight: 100
                    fill: [[3,[1.,1.,1.]], [10,[1,1,0]]]
                    size: 10px
                    stroke: { color: black, width: 4 }
            points:
                color: white
                priority: 5
                size: [[3,1px],[5,5px]]
                color: [[5,[1.,1.,1.]], [10,[1,1,0]]]
                text:
                    buffer: 3px
                    font:
                        family: ['Jura', Helvetica]
                        weight: 100
                        size: 10px
                        fill: [[5,[1.,1.,1.]], [10,[1,1,0]]]
                        stroke: { color: black, width: 4 }
        country-z4:
            filter:
                all:
                    - kind: [country]
                    - $zoom: [4]
            draw:
                text:
                    visible: true
                    font:
                        size: 12px
                        transform: uppercase
        country-z5:
            filter: { name: true, population: true, kind: [country], $zoom: [5] }
            draw:
                text:
                    visible: true
                    font:
                        size: 14px
                        transform: uppercase
            z5-dont-label:
                filter: { name: [Falkland Islands, Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien], $zoom: {min: 5, max: 6} }
                draw:
                    text:
                        visible: false
        country-z6:
            filter:
                all:
                    - name: true
                    - population: true
                    - kind: [country]
                    - $zoom: [6]
                any:
                    - { population: { min: 5000000 } }
            draw:
                text:
                    visible: true
                    priority: 3
                    font:
                        size: 16px
                        transform: uppercase
            z6-dont-label:
                filter: { name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,El Salvador,Belize,België - Belgique - Belgien], $zoom: {min: 6, max: 7} }
                draw:
                    text:
                        visible: false
        country-z7:
            filter: { name: true, kind: [country], $zoom: [7] }
            draw:
                text:
                    visible: true
                    priority: 3
                    font:
                        size: 18px
                        transform: uppercase
            z7-dont-label:
                filter: { name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,België - Belgique - Belgien,Хуссар Ирыстон,Аҧсны - Абхазия], $zoom: {min: 7, max: 8} }
                draw:
                    text:
                        visible: false
        populated-places:
            capital:
                filter: { country_capital: true }
                draw:
                    points:
                        visible: true
                        size: [[3,0px],[5,5px],[10,14px]]
                        text:
                            fonts:
                                weight: 300
                                size: [[5,5px],[10,18px]]
                                fill: White
                                stroke: { color: black, width: 4 }
    boundaries:
        data: { source: osm }
        draw:
            lines:
                style: boundaries-region
                order: global.order
                color: red
                width: 1px
                visible: false
        country:
            filter:
                kind: [country]
            draw:
                lines:
                    color: [[3,[1,1,1]],[12,[.3,.3,.3]],[20,[0,0,0]]]
                    width: [[1, 0px], [3, 0px], [4, 1px], [9, 1.5px], [14, 2.5px], [16, 3px], [17, 10m]]
                    visible: true
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        color: lightblue                        
        country_disputed:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                lines:
                    style: boundaries-region
                    order: global.order
                    color: [[3,[.6,.5,.5]],[12,[.5,.3,.3]],[20,[.4,0,0]]]
                    width: [[1, 0.2px], [3, 0px], [4, 1.0px], [9, 1.5px], [14, 2.5px], [16, 3.5px], [17, 10m]]
                    visible: true
        region:
            filter:
                kind: [region]
            draw:
                lines:
                    style: boundaries-region
                    color: [[5,[.5,.5,.5]],[12,[.3,.3,.3]]]
                    width: [[4, 0px], [5, 0.5px], [8, 1px], [14, 1.5px], [17, 1m]]
                    visible: true
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        color: lightblue
        water:
            filter: { maritime_boundary: true }
            draw:
                lines:
                    style: boundaries-region
                    color: lightblue
                    visible: false
                    width: [[10, 0px], [12, 1px], [17, 1m]]
styles:
    grid:
        mix: space-tile
        shaders:
            blocks:
                global: |
                    //  Simple Grid
                    //=============================
                    float grid(in vec2 st, in float res, in float press){
                        st = fract(st*res);
                        return 1.0-(step(press*res*.7,st.x) * step(press*res*.7,st.y));
                    }
                    float grid(in vec2 st, in float res){
                        return grid(st,res,0.005);
                    }
                    // GridTile
                    //=============================
                    float TileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.5+(1.0-fract(u_map_position.z))*0.5;
                        pct += grid(st,0.02,press)*.5;
                        pct += grid(st,0.01,press)*.25;
                        return pct*.5;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
    sunlight:
        base: polygons
        mix: [elevation-normal, geometry-projections, geometry-matrices, functions-map]
        shaders:
            uniforms:
                u_sun_offset: [-92, -10.273909587413442]
            blocks: 
                global: |
                    mat3 sphereMatrix (vec2 latlon) {
                        return rotateY3D(deg2rad(latlon.y)) * rotateX3D(deg2rad(latlon.x));
                    }
                    void updateSun () {
                        vec3 sun_pos = vec3(.0,.0,1495978.70700)*u_meters_per_pixel;
                        sun_pos = rotateY3D(deg2rad(u_sun_offset.x))*rotateX3D(deg2rad(u_sun_offset.y))*sun_pos;
                        point_light.position.xyz = sun_pos;
                    }
                normal: |
                    vec2 pos = u_map_position.xy+v_position.xy;
                    vec2 latlon = vec2(y2lat_m(pos.y),x2lon_m(pos.x)); // 90/180
                    mat3 sphere = sphereMatrix(latlon);
                    normal = normalize(sphere*normal)*2.;
                    vec2 uv = (latlon.yx/vec2(180.,90.)+1.)*.5;
                color: |
                    updateSun();
    zoom:
        mix: [functions-zoom]
        shaders:
            defines:
                ZOOM_START: 6.
                ZOOM_END: 9.
            blocks: 
                normal: |
                    float SatOsmPct = pow(1.-zoom(),5.0);
    textures:
        base: polygons
        mix: [sunlight, zoom]
        animated: true
        shaders:
            uniforms:
                u_day_map: imgs/earth-texture-day-xhd.jpg
                u_night_map: imgs/earth-texture-night-xhd.jpg
                u_cloud_map: imgs/earth-clouds-hd.jpg
                u_clouds_offset: [0,0]
            blocks:
                global: |
                    vec4 multitexture ( vec2 st, float lightF, float zoomF ) {
                        vec4 color = vec4(1.);
                        color = mix(texture2D(u_night_map,fract(st)), 
                                    texture2D(u_day_map,fract(st)),
                                    clamp(lightF,0.,1.));
                        float clouds = texture2D(u_cloud_map,fract(st+u_clouds_offset)).r;
                        clouds *= lightF*2.-1.;
                        return color+clouds*zoomF;
                    }
                filter: |
                    color = mix(color, multitexture(uv,light_accumulator_diffuse.r,SatOsmPct),SatOsmPct);       
    satelite:
        mix: [shapes-cross, grid]
        shaders:
            blocks:
                filter: |
                    // VARIABLES
                    //===============================
                    color = clamp(color,0.0,1.0);
                    vec2 st_center = gl_FragCoord.xy/u_resolution.xy;
                    float aspect = u_resolution.x/u_resolution.y;
                    st_center -= .5;
                    st_center.x *= aspect;
                    st_center += .5;
                    float light = 1.;
                    light = abs((step(.5,light_accumulator_diffuse.r) * smoothstep(.0,1.,1.-SatOsmPct))-light);
                    //
                    // TARGET AREA
                    //===============================
                    float target = 0.0;
                    // RECT
                    //target += (rect(st_center,.21)-rect(st_center,.2))*.3;
                    //target *= 1.0-cross(st_center,.5,1.);
                    // CROSS
                    target += cross(st_center,.00008,.02);
                    color.rgb = mix(color.rgb,vec3(light),target);
                    //
                    // GRID ON TILES
                    //===============================
                    // GRID
                    vec2 st = getTileCoords();
                    float zoom = 0.0001+fract(u_map_position.z);
                    float overlayGrid = 0.0;
                    overlayGrid += TileGrid()*.5;
                    // CROSSES
                    vec2 crosses_st = st + .5;
                    vec2 crosses_st_f = fract(crosses_st);
                    overlayGrid *= 1.-rect(crosses_st_f, .003*(1.+(1.-zoom)));
                    overlayGrid += cross(crosses_st_f, .0001, .012*(1.+(1.-zoom)) )*.75;
                    //
                    // APPLY 
                    //===============================
                    color.rgb = mix(color.rgb,vec3(light),clamp(overlayGrid,0.,1.)); 
                    //
                    // FILTER
                    //===============================
                    //vec2 st_i = floor(st_center*(max(u_resolution.x,u_resolution.y))*.1 );
                    //color += step(0.5,abs(mod(st_i.x,2.)-mod(st_i.y+1.,2.)))*0.1;                   
    earth:
        mix: [textures, satelite]
        material: 
            diffuse: white
            # specular: black
    water:
        mix: [textures, satelite]
        material:
            diffuse: white
            specular: .1
            shininess: 0.2
        animated: true
    spline:
        base: lines
        lighting: false
    orbit:
        base: lines
        lighting: false
        blend: overlay
    boundaries-region:
        base: lines
        dash: [6,2]
    landuse:
        base: polygons
        mix: [zoom, satelite, geometry-matrices, elevation-stripes]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                STRIPES_ALPHA: .5
                STRIPES_SCALE: 70.
                STRIPES_DIR: vec3(-0.600,-0.420,0.560)
                STRIPES_PCT: 1.8
                STRIPES_WIDTH: mix( (1.-zoom()),
                                    dot((sampleRaster(int(NORMAL_TEXTURE_INDEX)).rgb-.5)*2.,
                                        STRIPES_DIR),
                                    zoom())*STRIPES_PCT
