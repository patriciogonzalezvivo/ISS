# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-P6dkVl4
cameras:
    perspective:
        type: perspective
lights:
    point_light:
        type: point
        origin: ground
        position: [0,0,1000px]
        specular: 1
        diffuse: 1
styles:
    geometry-matrices:
        defines:
            PI: 3.14159265358979323846
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
    geometry-projection:
        shaders:
            defines:
                EARTH_RADIUS: 6378137.0
                PI: 3.14159265358979323846
                HALF_PI: 1.570796327
                QUATER_PI: .785398163
                deg2rad(d): (((d)*3.14159265358979323846)/180.0)
                rad2deg(d): (((d)*180.0)/3.14159265358979323846)
            blocks:
                global: |
                    //
                    //    The following functions take or return there results in something close to meters, along the equator 
                    //    http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_m (float y) { return rad2deg(2.0*atan(exp((y/EARTH_RADIUS)))-HALF_PI); }
                    float x2lon_m (float x) { return rad2deg(x/EARTH_RADIUS); }
                    float lat2y_m (float lat) { return EARTH_RADIUS*log(tan(QUATER_PI+ deg2rad(lat)/2.0)); }
                    float lon2x_m (float lon) { return deg2rad(lon)*EARTH_RADIUS; }
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                }else{
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    sunlight:
        mix: [geometry-projection, geometry-matrices, functions-map]
        shaders:
            uniforms:
                u_sun_offset: [0,23]
            blocks: 
                global: |
                    vec3 sphereNormals (vec2 latlon, vec3 normal) {
                        return normalize(rotateY3D(deg2rad(latlon.y)) * rotateX3D(deg2rad(latlon.x))*normal)*3.;
                    }
                    void updateSun () {
                        vec3 sun_pos = vec3(.0,.0,1495978707.00)*u_meters_per_pixel;
                        sun_pos = rotateY3D(deg2rad(u_sun_offset.x))*rotateX3D(deg2rad(u_sun_offset.y))*sun_pos;
                        point_light.position.xyz = sun_pos;
                    }
                normal: |
                    vec2 pos = u_map_position.xy+v_position.xy;
                    vec2 latlon = vec2(y2lat_m(pos.y),x2lon_m(pos.x)); // 90/180
                    normal = sphereNormals(latlon, normal);
                color: |
                    updateSun();
    textures:
        base: polygons
        mix: [sunlight]
        animated: true
        shaders:
            uniforms:
                u_normal_map: imgs/earth-normals-hd.jpg
                u_cloud_map: imgs/earth-clouds-hd.jpg
                u_day_map: imgs/earth-texture-day-xhd.jpg
                u_night_map: imgs/earth-texture-night-hd.jpg
            blocks:
                global: |
                    vec3 normalmap (vec2 st) {
                        return texture2D(u_normal_map,fract(st)).rgb*2.-1.;
                    }
                    vec4 multitexture ( vec2 st, float lightF ) {
                        vec4 color = mix(texture2D(u_night_map,fract(st)), 
                                        texture2D(u_day_map,fract(st)),
                                        lightF);
                        float clouds = texture2D(u_cloud_map,fract(st+vec2(u_time,sin(u_time))*.001 ) ).r;
                        return mix(color-clouds,color+clouds,lightF);;
                    }
                normal: |
                    float SatOsmPct = pow(1.-map(u_map_position.z,6.,9.,0.,1.),5.0);
                    vec2 uv = (latlon.yx/vec2(180.,90.)+1.)*.5;           // 0 -1
                    normal = (normal+normalmap(uv)*SatOsmPct);
                filter: |
                    color = mix(color,multitexture(uv,light_accumulator_diffuse.r),SatOsmPct);
    earth:
        mix: textures
        material: 
            diffuse: white
            specular: black
    water:
        mix: textures
        material:
            diffuse: white
            specular: white
    spline:
        base: lines
        lighting: false
    buildings:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.001 + .5),1.));
layers:
    earth:
        data: { source: osm }
        draw:
            earth:
                order: 0
                color: '#555'
            spline:
                order: 3
                color: white
                width: [[1,0px],[5,1.5px]]
    water:
        data: { source: osm }
        draw:
            water:
                order: 1
                color: '#ddd'
    roads:
        data: { source: osm, layer: roads }
        filter: { not: { highway: service, kind: rail } }
        draw:
            spline:
                order: 7
                color: white
                width: [[1,0px],[6,.25px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                spline:
                    order: 8
                    color: [1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    spline:
                        color: [1.000,0.933,0.710]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        spline:
                            color: [0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    spline:
                        order: 5
                        color: [0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                spline:
                    color: [[13, [0.8, 0.8, 0.8]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { highway: primary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { highway: secondary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { highway: tertiary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                spline:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]
        z-order:
            filter: { $zoom: {min: 14} }
            draw:
                spline:
                    order: function() { return 6 + feature.sort_key; }
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            buildings:
                order: 100
                color: '#999'
        extruded:
            filter: { $zoom: { min: 10 } }
            draw:
                buildings:
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }