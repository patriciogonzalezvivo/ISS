# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-P6dkVl4
cameras:
    perspective:
        type: perspective
lights:
    point_light:
        type: point
        origin: ground
        position: [0,0,1000px]
        specular: 1
        diffuse: 1
styles:
    geometry-matrices:
        defines:
            PI: 3.14159265358979323846
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
    geometry-projection:
        shaders:
            defines:
                EARTH_RADIUS: 6378137.0
                PI: 3.14159265358979323846
                HALF_PI: 1.570796327
                QUATER_PI: .785398163
                deg2rad(d): (((d)*3.14159265358979323846)/180.0)
                rad2deg(d): (((d)*180.0)/3.14159265358979323846)
            blocks:
                global: |
                    //
                    //    The following functions take or return there results in something close to meters, along the equator 
                    //    http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_m (float y) { return rad2deg(2.0*atan(exp((y/EARTH_RADIUS)))-HALF_PI); }
                    float x2lon_m (float x) { return rad2deg(x/EARTH_RADIUS); }
                    float lat2y_m (float lat) { return EARTH_RADIUS*log(tan(QUATER_PI+ deg2rad(lat)/2.0)); }
                    float lon2x_m (float lon) { return deg2rad(lon)*EARTH_RADIUS; }
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                }else{
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random(float x){ return fract(sin(x)*43758.5453);}
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) { return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453); }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) { return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453); }
                    vec3 random3 (vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
    generative-noise:
        mix: generative-random
        shaders:
            blocks:
                global: |
                    // 1D Value Noise for 1, 2 and 3 dimentions
                    // ================================
                    float noise (in float x) {
                        float i = floor(x);
                        float f = fract(x);
                        float u = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), u);
                    }
                    float noise (vec2 xy) {
                        vec2 i = floor(xy);
                        vec2 f = fract(xy);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float noise (vec3 xyz) {
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        vec3 i = floor(xyz);
                        vec3 f = fract(xyz);
                        float n = dot(i, step);
                        vec3 u = f * f * (3.0 - 2.0 * f);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))),
                                            u.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))),
                                            u.x),
                                        u.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                        random(n + dot(step, vec3(1,0,1))),
                                        u.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))),
                                            u.x),
                                    u.y),
                                u.z);
                    }
                    //
                    // Simplex Noise
                    //
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }
                    
                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
    sunlight:
        base: polygons
        mix: [geometry-projection, geometry-matrices, functions-map]
        shaders:
            uniforms:
                u_sun_offset: [-61,-9]
            blocks: 
                global: |
                    mat3 sphereMatrix (vec2 latlon) {
                        return rotateY3D(deg2rad(latlon.y)) * rotateX3D(deg2rad(latlon.x));
                    }
                    void updateSun () {
                        vec3 sun_pos = vec3(.0,.0,1495978.70700)*u_meters_per_pixel;
                        sun_pos = rotateY3D(deg2rad(u_sun_offset.x))*rotateX3D(deg2rad(u_sun_offset.y))*sun_pos;
                        point_light.position.xyz = sun_pos;
                    }
                normal: |
                    vec2 pos = u_map_position.xy+v_position.xy;
                    vec2 latlon = vec2(y2lat_m(pos.y),x2lon_m(pos.x)); // 90/180
                    mat3 sphere = sphereMatrix(latlon);
                    normal = normalize(sphere*normal)*2.;
                color: |
                    updateSun();
    textures:
        base: polygons
        mix: [sunlight, shapes-cross]
        animated: true
        shaders:
            uniforms:
                u_normal_map: imgs/earth-normals-hd.jpg
                u_cloud_map: imgs/earth-clouds-hd.jpg
                u_day_map: imgs/earth-texture-day-xhd.jpg
                u_night_map: imgs/earth-texture-night-hd.jpg
            blocks:
                global: |
                    vec3 normalmap (vec2 st, mat3 normalMat) {
                        vec3 normalTex = texture2D(u_normal_map,fract(st)).rgb-.5;
                        return normalize(normalMat*normalTex);
                    }
                    vec4 multitexture ( vec2 st, float lightF ) {
                        vec4 color = mix(texture2D(u_night_map,fract(st)), 
                                        texture2D(u_day_map,fract(st)),
                                        clamp(lightF,0.,1.));
                        float clouds = texture2D(u_cloud_map,fract(st+vec2(u_time,sin(u_time))*.001 ) ).r;
                        clouds *= lightF*2.-1.;
                        return color+clouds;
                    }
                normal: |
                    float SatOsmPct = pow(1.-map(u_map_position.z,6.,9.,0.,1.),5.0);
                    vec2 uv = (latlon.yx/vec2(180.,90.)+1.)*.5;
                    normal = mix(normal,normalmap(uv,sphere)*3.,SatOsmPct);
                    
                    vec2 st = gl_FragCoord.xy/u_resolution.xy;
                    float aspect = u_resolution.x/u_resolution.y;
                    st -= .5;
                    st.x *= aspect;
                    st += .5;
                filter: |
                    color = mix(color,multitexture(uv,light_accumulator_diffuse.r),SatOsmPct);
                    
                    float sat = map(u_map_position.z,0.,6.,0.,1.,false);
                    float zoom_factor = pow(sat,8.);//1.-SatOsmPct;
                    color += cross(st,.00002*zoom_factor,.02*zoom_factor)*SatOsmPct;
                    
    earth:
        mix: textures
        material: 
            diffuse: white
            specular: black
    water:
        mix: [textures, generative-noise]
        material:
            diffuse: white
            specular: white
        animated: true
        shaders: 
            blocks: 
                normal: |
                    normal += snoise(vec3(v_world_position.xy*0.01,u_time*.5))*0.02;
    spline:
        base: lines
        lighting: false
    buildings:
        mix: sunlight
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.001 + .5),1.));
layers:
    earth:
        data: { source: osm }
        draw:
            earth:
                order: 0
                color: '#555'
            spline:
                order: 3
                color: white
                width: [[1,0px],[5,1.5px]]
    water:
        data: { source: osm }
        draw:
            water:
                order: 1
                color: '#ddd'
    roads:
        data: { source: osm, layer: roads }
        filter: { not: { highway: service, kind: rail } }
        draw:
            spline:
                order: 7
                color: white
                width: [[1,0px],[6,.25px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                spline:
                    order: 8
                    color: [1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    spline:
                        color: [1.000,0.933,0.710]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        spline:
                            color: [0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    spline:
                        order: 5
                        color: [0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                spline:
                    color: [[13, [0.8, 0.8, 0.8]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { highway: primary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { highway: secondary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { highway: tertiary }
                        draw:
                            spline:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                spline:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]
        z-order:
            filter: { $zoom: {min: 14} }
            draw:
                spline:
                    order: function() { return 6 + feature.sort_key; }
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            buildings:
                order: 100
                color: '#999'
        extruded:
            filter: { $zoom: { min: 10 } }
            draw:
                buildings:
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                font:
                    style: italic
                    size: 14px
                    family: Helvetica
                    fill: black
                    stroke: { color: white , width: 3 }